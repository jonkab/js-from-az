/* 
    Red√©couvrons ensemble les fonctions fl√©ch√©es et leurs diff√©rences avec les fonctions classiques.
*/

/* 
    1. Syntaxe.
    La syntaxe est moins charg√©e, pouvant ainsi √™tre plus facilement utilis√©e en tant qu'argument.
*/

    // Notez le return implicite quand on n'utilise pas de parenth√®se !
    // const logger = a =>[RETURN] console.log(a)
    const logger = a => console.log(a)
    //console.log(logger("test"))

    // Si vous voulez retourner un objet avec un return implicite, il faut utiliser les parenth√®ses comme ceci 

    const returnObj = a => ({a})
    console.log(returnObj("syntaxe FF ({}) pour return un objet"))
    
    // Si vous n'avez qu'un param√®tre, pas besoin de parenth√®ses
    const foo = a => a
    const add = (a,b) => a + b

    const arr = ["üçì","üçç","ü•≠","üçä"]

    // Syntaxe avec FF
    arr.forEach(fruit => console.log(fruit))
    
    // Syntaxe fonction classique
    arr.forEach(function(fruit){console.log(fruit)})
    
    // Impossible de d√©clarer une fonction fl√©ch√©e nomm√©e, on doit l'affecter √† une variable sous la forme d'une expression de fonction

    //ff() => console.log("Je suis une FF") // erreur
    const ff = () => console.log("Je suis une FF affecter √† une variable !")
    ff()


/* 
    2. Le mot cl√© this avec les fonctions.

    this est cr√©√© au moment de l'ex√©cution des fonctions classiques, lors de la cr√©ation d'un contexte d'ex√©cution de fonction, FEC(function execution context).

    Une propri√©t√© de l'environment record est cr√©√©e et elle pointe vers l'objet qui a appel√© cette fonction ou vers l'objet global si elle n'est pas explicitement appel√©e par un objet.

    Quant aux fonctions fl√©ch√©es, le contexte d'ex√©cution cr√©√© lors de leur ex√©cution ne cr√©e tout simplement pas de this.
    Elles vont donc soit utiliser le this d'une fonction fl√©ch√©e parent, soit utiliser le this global, c'est-√†-dire l'objet window.
*/

const obj = {
    game: "StarCraft 2",
    foo: function(){
        console.log(this) // obj
        console.log(this.game) // "StarCraft 2"

        const arrowInClassicFunction = () => {
            console.log(this) // obj (n'ayant pas de "this", elle essaye de le trouver dans l'environnement parent pour r√©soudre l'identifiant)
            console.log(this.game) // "StarCraft 2"
        }
        arrowInClassicFunction()
    },
    bar: () => {
        console.log(this) // window
        console.log(this.game) // undefined
    }
}

obj.foo()


/* 
    3. arguments

    Comme pour this, une propri√©t√© 'arguments' est disponible avec les fonctions classiques. (La propri√©t√© 'arguments' est un objet)
    
    Elle repr√©sente les arguments pass√©s √† la fonction.

    Et comme this, les FF ne cr√©ent pas ce genre de propri√©t√© dans l'ER de leur contexte d'execution.
*/

function faz(){
    console.log(arguments); // liste des arguments
    const foz = () => {
        console.log(arguments); // liste des arguments de la fonction
        // parent faz() car elle est classique et non FF
        // alors que la fonction foz() est FF
    }
    foz("abc","zzz","be")
}

faz(5,true,[1,2,3])


const fuz = () => {
    console.log(arguments); // Erreur
}
//fuz("BLUE",999,false)


/*
    On comprend donc avec les fonctions classiques que m√™me si aucun
    param√®tre n'a √©t√© pr√©vu d'√™tre pass√© √† la fonction quand on l'a
    cr√©√©, il est quand m√™me possible de passer des arguments quand on
    appel la fonction et de les r√©cup√©rer via √† la propri√©t√© 'arguments'.
*/
function testArg() {
    console.log(arguments)//Un objet 'argument' {0: "Lorem", 1: 5}

    for (let argument of arguments) {
        console.log(argument)//Lorem 5
    }
}

testArg("Lorem", 5)