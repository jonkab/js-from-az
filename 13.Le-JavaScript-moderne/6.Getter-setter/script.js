/* 
    Les getters et les setters permettent d'effectuer des actions suppl√©mentaires lorsqu'on veut lire une propri√©t√©(getter) ou mettre en place une nouvelle valeur pour une propri√©t√©(setter).

    Sous le capot, c'est comme si une fonction √©tait ex√©cut√©e.
    Et c'est d'ailleurs comme ceci que fonctionne la plus parts des m√©thodes des objets du DOM.
    C'est gr√¢ce au system de Getter Setter qu'on peut acc√©der ou modifier les propri√©t√©s d'un √©l√©ment du DOM.
*/


/*
    Fonctionnement de get :
    - D√©finition : Un accesseur get permet de d√©finir une m√©thode qui sera appel√©e lors de l'acc√®s √† une
    propri√©t√© sp√©cifique d'un objet.

    - Syntaxe : La syntaxe pour d√©finir un accesseur get utilise le mot-cl√© get suivi d'un nom (qui repr√©sente
    le nom de la propri√©t√© √† acc√©der) et d'un bloc de code (semblable √† une fonction).

    - Acc√®s : Lorsque l'on acc√®de √† la propri√©t√© pour laquelle le get a √©t√© d√©fini, le bloc de code d√©fini est
    ex√©cut√©, et la valeur retourn√©e par ce bloc est retourn√©e comme valeur de la propri√©t√©. Contrairement √†
    une fonction, on n'utilise pas de parenth√®ses pour acc√©der √† une propri√©t√© avec un getter.


    Fonctionnement de set :
    - D√©finition : Un accesseur set est utilis√© pour intercepter les modifications d'une propri√©t√© sp√©cifique d'un objet.

    - Syntaxe : La syntaxe pour d√©finir un accesseur set utilise le mot-cl√© set suivi d'un nom (qui repr√©sente
    le nom de la propri√©t√© √† modifier) et d'un bloc de code. Le bloc de code prend un param√®tre qui repr√©sente
    la nouvelle valeur assign√©e √† la propri√©t√©.
*/
    const fruitsShop = {
        shopName: "Fruits Paradise",
        fruits: ["ü•≠","üçá","ü••"],
        get fruitsLength(){
            console.log("---- get ----");
            if (this.fruits.length <= 3){
                console.log(`Plus que ${this.fruits.length}. Attention, nous manquons de fruits !`);
            }
            return this.fruits.length;
            /*
                Comparaison avec les Fonctions :
                - Appel : Une fonction doit √™tre appel√©e avec des parenth√®ses (par exemple, maFonction()), tandis qu'un accesseur get est utilis√© comme si on acc√©dait √† une propri√©t√© normale (par
                exemple, monObjet.maPropriete).

                - Intention : Les fonctions peuvent √™tre utilis√©es pour ex√©cuter n'importe quelle op√©ration, tandis que les accesseurs get sont sp√©cifiquement con√ßus pour calculer et retourner une
                valeur lors de l'acc√®s √† une propri√©t√© d'un objet.
            */
        },
        set setName(value){
            console.log("\n\n---- set ----");
            if(!/fruits/i.test(value)){
                console.log(`Le mot "fruits" doit √™tre pr√©sent dans le nom : ${value}`);
                return
            }
            return this.shopName = value;
            /*
                Comparaison avec les Fonctions :
                - Passage de Valeur : Lorsqu'on d√©finit un set, on sp√©cifie un param√®tre dans la
                d√©finition qui re√ßoit la valeur assign√©e √† la propri√©t√©. Ce n'est pas quelque chose que l'on
                fait explicitement avec une fonction classique.

                - Utilisation : On utilise un set comme si on assignait une valeur √† une propri√©t√©
                normale, sans utiliser de parenth√®ses.
            */
        }
    };

    console.log(fruitsShop.fruitsLength);//Plus que 3. Attention, nous manquons de fruits ! | 3
    console.log(fruitsShop.setName = "phruits");//Le mot "fruits" doit √™tre pr√©sent dans le nom : phruits

    console.log(fruitsShop.shopName);//Fruits Paradise

    console.log(fruitsShop.setName = "Fruits Heaven")//Fruits Heaven
    console.log(fruitsShop.shopName);//Fruits Heaven

/*
    Conclusion getter :
    Bien que les accesseurs get se comportent de mani√®re similaire √† des fonctions en ce sens qu'ils ex√©cutent
    un bloc de code et retournent une valeur, leur syntaxe, leur utilisation, et leur but sont diff√©rents.

    Les getters permettent un acc√®s semblable √† celui des propri√©t√©s pour des valeurs qui n√©cessitent un
    calcul ou une r√©cup√©ration sp√©cifique, offrant ainsi une interface plus propre et plus intuitive pour
    interagir avec les objets.


    Conclusion setter :
    Les accesseurs set offrent une m√©thode puissante pour contr√¥ler comment les valeurs sont assign√©es aux
    propri√©t√©s d'un objet, permettant la validation, la transformation, ou d'autres effets secondaires lors
    de ces assignations.

    Comme pour les accesseurs get, ils fournissent une interface plus intuitive pour travailler avec les
    objets, am√©liorant ainsi la lisibilit√© et la maintenabilit√© du code.
*/



