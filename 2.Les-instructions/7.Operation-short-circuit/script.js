/* 
    1. Les op√©rations "Short circuit", cour-circuit en FR.

    Les expressions utilisant des op√©rateurs logiques (||, &&) retournent des valeurs.

    Le ET logique retourne le second op√©rande si le premier et le second op√©rande sont
    √©valu√©s comme truthy.

    Le OU logique retourne le premier op√©rande s'il est √©valu√© comme truthy,
    ou le second si c'est ce dernier qui est truthy.
*/
// -- Avec l'exemple d'origine -- //
let isAuthenticated = true;
//const user = null;
const user = {
  name: "Hanz",
  level: 99
}
console.log(isAuthenticated || user);


// -- Avec mon exemple -- //
/**
 * Court-circuit avec && (et logique) :
 *
 * Si l'op√©rande de gauche est falsy, l'expression retourne imm√©diatement l'op√©rande de
 * gauche sans √©valuer l'op√©rande de droite, car l'op√©ration && n√©cessite que les deux
 * op√©randes soient truthy pour retourner true.
 *
 * Exemple : a && b retourne a si a est falsy, sinon retourne b.
 */
//Pour le test avec une fonction foo()
function foo(){console.log("Short circuit")}
let a = false;
let result = a && foo(); // foo() ne sera pas appel√©e si a est falsy.
console.log(result);//renvoi false

/**
 * Court-circuit avec || (ou logique) :
 *
 * Si l'op√©rande de gauche est truthy, l'expression retourne imm√©diatement l'op√©rande de
 * gauche sans √©valuer l'op√©rande de droite, car l'op√©ration || n√©cessite que l'un des
 * op√©randes soit truthy pour retourner true.
 *
 * Exemple : a || b retourne a si a est truthy, sinon retourne b.
 */
//Pour le test avec une fonction foo2()
function foo2(){console.log("Short circuit")}
let a2 = false;
let result2 = a2 || foo2(); // foo2() sera appel√©e si a est falsy.
console.log(result2);//renvoi Short circuit

/*
üîîüîî RAPPEL [TRUTHY] üîîüîî
    ‚ÑπÔ∏è Voici une liste des valeurs consid√©r√©es comme truthy en JavaScript :
        - Les nombres non nuls : Tous les nombres diff√©rents de z√©ro (1, -1, 0.5, etc.)
          sont truthy.
        - Les cha√Ænes de caract√®res non vides : Toute cha√Æne de caract√®res qui contient
          au moins un caract√®re est truthy ("hello", "123", etc.).
        - Les valeurs bool√©ennes true : La valeur bool√©enne true est truthy.
        - Les objets : Tout objet, y compris les objets construits par l'utilisateur et
          les objets int√©gr√©s, est truthy.
        - Les tableaux non vides : Un tableau contenant au moins un √©l√©ment est truthy.
        - Les fonctions : Une fonction d√©finie (avec du code √† ex√©cuter) est truthy.
        - Les instances de types d'objets particuliers : Par exemple, les instances de
          Date, RegExp, etc., sont g√©n√©ralement truthy.

    Il est important de noter que les valeurs truthy et falsy sont utilis√©es dans des
    contextes o√π une valeur bool√©enne est attendue, comme dans les conditions des
    instructions if, while, et autres. Cela permet de simplifier la logique
    conditionnelle dans le code.

üîîüîî RAPPEL [FALSY] üîîüîî
    ‚ÑπÔ∏è Voici une liste des valeurs consid√©r√©es comme falsy en JavaScript :
        - false : La valeur bool√©enne false.
        - 0 : Le nombre z√©ro.
        - "" (cha√Æne de caract√®res vide) : Une cha√Æne de caract√®res ne contenant aucun
          caract√®re.
        - null : Une valeur sp√©ciale qui signifie l'absence de valeur ou la non-d√©finition
          d'un objet.
        - undefined : Une valeur sp√©ciale qui signifie que la variable n'a pas √©t√© d√©finie
          ou qu'elle n'a pas de valeur.
        - NaN : Not a Number, r√©sultat d'op√©rations math√©matiques incorrectes.
        - document.all : Une propri√©t√© sp√©cifique au navigateur, falsy dans la plupart des
          navigateurs modernes.

    Ces valeurs sont √©valu√©es comme false lorsqu'elles sont utilis√©es dans des contextes
    o√π une valeur bool√©enne est attendue, comme dans des instructions conditionnelles
    (if, while, etc.).

    Toutes les autres valeurs sont consid√©r√©es comme truthy.
 */