/*
    1. Le mot cl√© delete.

    On peut supprimer une propri√©t√© d'un objet √† l'aide du mot cl√© delete.
*/

const city = {
  name: "Bratislava",
  population: 424000
}

console.log(city);//retourne -> {name: 'Bratislava', population: 424000}
delete city.name;//supprime la propri√©t√© "name" et sa valeur "Bratislava"
console.log(city);//retourne -> {population: 424000}

//O√π ajouter nouvelle une propri√©t√© √† un objet
city.surface = "150000";
console.log(city);//retourne -> {population: 424000, surface: '150000'}

/* Attention, utiliser delete avec la propri√©t√© d'un tableau va remplacer l'√©l√©ment supprim√© par un √©l√©ment empty */
let montableau = [1, 2, 3];
console.log(montableau)//retourne -> [1, 2, 3]
delete montableau[1]//supprime seulement la valeur "2" mais l'index 1 reste
console.log(montableau)//retourne -> [1, vide, 3]



/* 
    2. Bracket et dot notation.

    On peut s√©lectionner des propri√©t√©s en utilisant deux notations.
   
    A. Le point : obj.prop
    La dot notation, en utilisant directement le nom d'une propri√©t√©.
    La dot notation n'est pas disponible avec une cha√Æne de caract√®re ou un nombre, dans ce cas il faut utiliser la bracket notation.

    B. Les crochets [] : obj["prop"]
    C'est la bracket notation.
    Si vous utilisez un autre type qu'une cha√Æne entre les crochets, il sera converti en cha√Æne. obj[1] donnera obj["1"]

*/

const dog = {
  name: "Riki",
  legs: 4,
  10: 999
}
//dot notation
console.log(dog.name);
//bracket notation
console.log(dog["name"]);

//Pour acc√©der √† une propri√©t√© qui a comme nom un nombre dans un objet,
console.log(dog["10"]);//Il faut obligatoire utiliser la bracket notation[]


/* 
    3. Form raccourcie des m√©thodes.

    On peut utiliser des fonctions classiques et les fonctions fl√©ch√©es
    dans les objets, voyons ensemble les diff√©rentes syntaxes.
*/
const robot = {
  // fonction classic
  aim: function () {
    console.log("Aiming");
  },
  // fonction classique raccourcie (2015+)
  shoot() {
    console.log("Bang");
  },
  // fonction fl√©ch√©e
  run: () => console.log("Running")
}



/* 
    4. Les tableaux sont des objets.

    Les tableaux sont des objets sp√©ciaux permettant de manipuler plusieurs
    valeurs facilement et contenant toute une flop√©e de m√©thodes tr√®s pratiques.

    Chaque √©l√©ment est accessible par son index, nous sommes donc en pr√©sence
    d'une propri√©t√© - valeur.

    // Cela ressemble beaucoup √† un objet n'est-ce pas ?
    [
      0: "üçì",
      1: "üçå",
      2: "üçá"
    ]

    Ils ont √©galement une propri√©t√© length.
    On acc√®de aux propri√©t√©s d'un tableau via la bracket notation,
    avec des nombres (les index).

*/

const fruits = ["üçì","üçå","üçá"];

console.log(fruits);
console.log(typeof fruits);
console.log(fruits[1], fruits[1]);

//Il est possible aussi d'ajouter des propri√©t√©s √† des tableaux sans passer
//par la m√©thode ".push()" directement avex la dote notation.
//Cette m√©thode n'est n√©anmoins pas couramment utilis√©e.
fruits.item = "nom d'un item";
console.log(fruits)//Retourne -> ['üçì', 'üçå', 'üçá', item: "nom d'un item"]


/* 
    5. Les fonctions sont des objets.

    En JavaScript, les fonctions sont des first-class objets,
    car elles peuvent √™tre appel√©es, pass√©es √† d'autres fonctions(param√®tres-arguments)
    et qu'elles contiennent aussi des propri√©t√©s.

    D'ailleurs, il est aussi possible de leur cr√©er des propri√©t√©s.

    Les fonctions sont des objets cr√©√©s √† partir du constructeur Function.

*/

function foo(){
  console.log("Hello !");
}
console.dir(foo);//Affiche la d√©claration de la fonction

//O√π ajouter nouvelle une propri√©t√© √† l'objet function :
foo.customProperties = "une nouvelle propri√©t√©";//Ajoute la propri√©t√© "customProperties"
console.dir(foo);//Affiche la d√©claration de la fonction
// avec la MAJ de la nouvelle propri√©t√© "customProperties"
