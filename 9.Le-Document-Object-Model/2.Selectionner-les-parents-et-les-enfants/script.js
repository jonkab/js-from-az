/*  
    Les √©l√©ments imbriqu√©s de notre page HTML deviennent des objets imbriqu√©s du DOM apr√®s analyse d'un navigateur.

    <div>
        <p>Hello</p>
    </div>
    
    =>

    {
        tag: "div",
        content: "",
        children: [
            {
                tag: "p",
                content: "Hello"
            },
            ...
        ]
    }
    // üîº Ceci est une image pour vous aider √† comprendre, √ßa ne repr√©sente pas les propri√©t√©s exactes utilis√©es.

    D√©couvrons les propri√©t√©s pratiques li√©es aux relations parents / enfants.
*/

document.addEventListener("DOMContentLoaded", (event) => {

    const card = document.querySelector(".card")

    // Renvoie l'objet de l'√©l√©ment
    console.log(card)

    /* Renvoie un tableau */
    // NodeList
    console.log(card.childNodes)// Renvoie Un tableau de tous les types de n≈ìud (√©l√©ment, textes, commentaires...)
    //HTMLCollection
    console.log(card.children)// Renvoie un tableau contenant ses √©l√©ments enfants, mais contient uniquement des n≈ìuds de type √©l√©ments.

    // Renvoie l'√©l√©ment enfant sous forme d'objet, mais uniquement un n≈ìud de type √©l√©ment.
    console.log(card.children[1])//√âtant dans un tableau, on peut s√©lectionner un enfant directement via son index

    console.log(card.firstChild)//Renvoie le 1√© n≈ìud(tout type de n≈ìud) enfant
    // donc s'il y a du text, un simple espace ou plusieurs, des retours √† la ligne ou tabulations, etc
    // avant un n≈ìud de type √©l√©ment alors le 1√© enfants ne sera pas un √©l√©ment, mais un type de n≈ìud de ceux cit√©s avant.

    // Renvoie le 1√© √©l√©ment enfant sous forme d'objet
    console.log(card.firstElementChild)// mais uniquement un n≈ìud de type √©l√©ment.

    console.log(card.lastChild)//Renvoie le dernier n≈ìud(tout type de n≈ìud) enfant
    // donc s'il y a du text, un simple espace ou plusieurs, des retours √† la ligne ou tabulations, etc
    // donc m√™me principe que pour "firstChild" mais dans pour le dernier enfant.

    // Renvoie le dernier √©l√©ment enfant sous forme d'objet
    console.log(card.lastElementChild)// mais uniquement un n≈ìud de type √©l√©ment.


    const title = document.querySelector("h2")
    console.log(title)
    console.log(title.nextSibling)//Renvoie uniquement le fr√®re direct suivant, mais tous types de n≈ìud confondu, mais si fr√®re il y a, sinon "null"
    console.log(title.nextElementSibling)// Renvoie uniquement le fr√®re direct suivant, mais un type √©l√©ment et si fr√®re il y a, sinon "null"
    console.log(title.previousSibling)//Renvoie uniquement le fr√®re pr√©cedent mais tous types de n≈ìud confondu, mais si fr√®re il y a, sinon "null"
    console.log(title.previousElementSibling)// Renvoie uniquement le fr√®re direct pr√©cedent, mais un type √©l√©ment et si fr√®re il y a, sinon "null"
    // Par exemple ici, elle renvoie "null" car le title n'a pas d'√©l√©ment fr√®re avant lui


    console.log("------------ Debuggage -------------")
    console.log("------ parentElement -----")
    console.log(title.parentElement)
    console.log("------ fin -----")

    console.log("\n\n------ parentNode -----")
    console.log(title.parentNode)// Renvoie le parent du n≈ìud sp√©cifi√© dans l'arborescence de DOM.
    console.log("------ fin -----")

    console.log("\n\n------ parentElement -----")
    console.log(title.parentElement)// Renvoie le parent du n≈ìud DOM (Element) ou null si ce dernier n'a pas de parent ou si le parent n'est pas un Element du DOM.

    console.log(title.parentElement.parentElement)// On peut aussi escalader les √©l√©ments parents en cha√Ænant la propri√©t√©

    console.log(title.nodeName)// Renvoie le nom du n≈ìud courant dans une cha√Æne en fonction du type de n≈ìud.
    // Par exemple si le nodeName est une balise HTML alors,
    // elle renvoie le nom de la balise ici "H2" en type string.

})




