/* 
    1. Ins√©rer du contenu avec les backticks 
    
    Avec les template literals (les backticks``), nous pouvons int√©grer des expressions JavaScript
    dans une cha√Æne de caract√®res.
    Cela peut se r√©v√©ler tr√®s pratique pour cr√©er du contenu, mais attention aux probl√®mes de s√©curit√©.
*/
    const list = document.querySelector(".list");
    const data = [
      {
        title: "Lorem ipsum",
        symbol: "‚òòÔ∏è",
        content: "Lorem ipsum, dolor sit amet consectetur adipisicing elit. Earum fugiat, minima, iure rem quia vitae ab voluptatem natus nesciunt eligendi excepturi possimus nemo consequatur ut?"
      },
      {
        title: "Lorem ipsum",
        symbol: "üå±",
        content: "Lorem ipsum, dolor sit amet consectetur adipisicing elit. Earum fugiat, minima, iure rem quia vitae ab voluptatem natus nesciunt eligendi excepturi possimus nemo consequatur ut?"
      },
      {
        title: "Lorem ipsum",
        symbol: "üçè",
        content: "Lorem ipsum, dolor sit amet consectetur adipisicing elit. Earum fugiat, minima, iure rem quia vitae ab voluptatem natus nesciunt eligendi excepturi possimus nemo consequatur ut?"
      },
      {
        title: "Lorem ipsum",
        symbol: "üìó",
        content: `<img src='1' onerror='console.log("Code malicieux")'>`
      }]

    //Solution qui fonctionne mais √† utiliser seulement si on g√©r√© nous-m√™me l'api qui fourni les donn√©es.
    //Et m√™me si on g√©re l'api il faut s'assurer qu'elle n'est pas piratable car si c'est le cas alors ne pas utiliser cette solution.
    //Si c'est une API externe alors ne pas utiliser cette solution non plus mais celle qui suit.
    data.forEach(data => {
      const li = document.createElement("li")
      li.innerHTML = `
      <h2>${data.title} ${data.symbol}</h2>
      <p>${data.content}</p>
      `
      list.appendChild(li)
    })

/* 
      1. Attention, danger. 

      Si nous int√©grons des donn√©es venant d'une source non s√ªre, comme une API externe,
      et que nous utilisons directement "li.innerHTML = data.content;",
      alors nous convertissons tout le texte en code potentiel.

      L'√©l√©ment <script></script> est bloqu√© par d√©faut avec innerHTML.

      Mais il existe d'autres fa√ßons plus obscures d'ex√©cuter du JS.
      
      `<img src='1' onerror='alert("Error loading image")'>`;

      Cette ligne va ex√©cuter le code dans onerror.
      Ici c'est une m√©thode alert(), mais √ßa pourrait √™tre une r√©cup√©ration de cookies
      qu'on pourrait envoyer vers un tier.

*/

    // Solution qui m√©lange les deux pratiques, mais sans risque.
    data.forEach((data, index) => {
      const li = document.createElement("li")
      const liContent = `
      <h2 class="title" id="title-${index}"></h2>
      <p class="parag"></p>
      `
      li.innerHTML = liContent
      li.querySelector(".title").textContent = `${data.title} ${data.symbol}`
      li.querySelector(".parag").textContent = `${data.content}
      `
      list.appendChild(li)
    })



/* 
    En r√©sum√©, les templates litterals peuvent √™tre utiles si on a envie de cr√©er de gros morceaux de codes.
    
    N√©anmoins, si on s'en sert pour int√©grer du code venant d'une source qu'on ne ma√Ætrise pas,
    on va au devant de gros probl√®mes, car quiconque peut partager du code malicieux avec tous ceux qui visiteront la page.

    Voil√† pourquoi il est pr√©f√©rable d'utiliser la m√©thode createElement() le plus souvent.
*/